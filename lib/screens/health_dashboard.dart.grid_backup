import 'package:flutter/material.dart';
import '../widgets/semi_circle_progress.dart';
import 'detail_screen.dart';
import 'my_profile.dart'; // Import the new profile page
import 'dart:math' as math;

class HealthDashboard extends StatefulWidget {
  const HealthDashboard({super.key});

  @override
  State<HealthDashboard> createState() => _HealthDashboardState();
}

class _HealthDashboardState extends State<HealthDashboard> {
  int _selectedIndex = 0;

  Color _getSelectedIconColor(int index) {
    return index == _selectedIndex ? Colors.deepOrange : Colors.grey;
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      bottomNavigationBar: SizedBox(
        height: 87, // Increased from default ~60px to 62px
        child: BottomNavigationBar(
          backgroundColor: Colors.black,
          type: BottomNavigationBarType.fixed,
          selectedItemColor: Colors.white, // Keep text white for all items
          unselectedItemColor: Colors.grey,
          currentIndex: _selectedIndex,
          onTap: _onItemTapped,
          items: [
            BottomNavigationBarItem(
              icon: Icon(Icons.favorite, color: _getSelectedIconColor(0)),
              label: "Health",
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.directions_run, color: _getSelectedIconColor(1)),
              label: "Workout",
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.people, color: _getSelectedIconColor(2)),
              label: "Community",
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.person, color: _getSelectedIconColor(3)),
              label: "Profile",
            ),
          ],
        ),
      ),
      body: SafeArea(
        child: IndexedStack(
          index: _selectedIndex,
          children: [
            // Health page content
            CustomScrollView(
              slivers: [
                // Sticky header with "Health" text and "+" button
                SliverAppBar(
                  backgroundColor: Colors.black,
                  expandedHeight:
                      60, // <-- HEIGHT OF HEADER CONTAINER (Change this value to adjust height)
                  floating: false,
                  pinned: true,
                  automaticallyImplyLeading:
                      false, // Prevents automatic back button
                  title: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Padding(
                        padding: EdgeInsets.only(
                          left: 10,
                          top:
                              30, // <-- ADJUST TOP PADDING TO LOWER "Health" TEXT
                        ), // Move "Health" slightly to the right and lower it
                        child: Text(
                          "Health",
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(
                          top: 30, // <-- ADJUST TOP PADDING TO LOWER "+" BUTTON
                        ),
                        child: PopupMenuButton<String>(
                          icon: const Icon(
                            Icons.add_circle_outline,
                            color: Colors.white,
                          ),
                          color:
                              Colors.grey[800], // Gray background for dropdown
                          onSelected: (String result) {
                            // Handle menu item selection
                          },
                          itemBuilder: (BuildContext context) =>
                              <PopupMenuEntry<String>>[
                                const PopupMenuItem<String>(
                                  value: 'add',
                                  child: Text(
                                    'Add',
                                    style: TextStyle(
                                      color: Colors.white,
                                    ), // White text
                                  ),
                                ),
                              ],
                        ),
                      ),
                    ],
                  ),
                  centerTitle: false,
                ),
                // Scrollable content
                SliverPadding(
                  padding: const EdgeInsets.all(16),
                  sliver: SliverList(
                    delegate: SliverChildListDelegate([
                      const SizedBox(height: 10),

                      // Progress arc
                      Center(
                        child: Transform.translate(
                          offset: const Offset(
                            0,
                            -20, // Adjust this value to move the semi-circle higher or lower
                          ), // Move semi-circle higher
                          child: SemiCircleProgress(
                            caloriesPercent: 80.8, // 485/60
                            stepsPercent: 62.3, // 4360/7000
                            movingPercent: 15.0, // 9/60
                            caloriesValue: "485",
                            caloriesGoal: "/600 kcal",
                            stepsValue: "4360",
                            stepsGoal: "/7000 steps",
                            movingValue: "9",
                            movingGoal: "/60 mins",
                          ),
                        ),
                      ),

                      const SizedBox(
                        height: 5,
                      ), // Reduced space below semi-circle
                      // Modern Activity summary card
                      Container(
                        width: double.infinity,
                        decoration: BoxDecoration(
                          color: const Color(0xFF191919),
                          borderRadius: BorderRadius.circular(20),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.3),
                              blurRadius: 15,
                              offset: const Offset(0, 5),
                            ),
                          ],
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              // Horizontal row of activity metrics with modern styling
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceEvenly,
                                children: [
                                  _ModernMetricItem(
                                    icon: Icons.local_fire_department,
                                    iconColor: const Color(
                                      0xFFFF6B35,
                                    ), // Modern red-orange
                                    label: "Calories",
                                    value: "485",
                                    goal: "/600 kcal",
                                    onTap: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                          builder: (context) =>
                                              DetailScreen(title: "Calories"),
                                        ),
                                      );
                                    },
                                  ),
                                  _ModernMetricItem(
                                    icon: Icons.directions_walk,
                                    iconColor: const Color(
                                      0xFFFF9800,
                                    ), // Modern orange
                                    label: "Steps",
                                    value: "4360",
                                    goal: "/7000 steps",
                                    onTap: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                          builder: (context) =>
                                              DetailScreen(title: "Steps"),
                                        ),
                                      );
                                    },
                                  ),
                                  _ModernMetricItem(
                                    icon: Icons.directions_run,
                                    iconColor: const Color(
                                      0xFF2196F3,
                                    ), // Modern blue
                                    label: "Moving",
                                    value: "9",
                                    goal: "/60 mins",
                                    onTap: () {
                                      Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                          builder: (context) =>
                                              DetailScreen(title: "Moving"),
                                        ),
                                      );
                                    },
                                  ),
                                ],
                              ),
                              const SizedBox(
                                height: 16,
                              ), // Spacing before divider
                              Container(height: 1, color: Colors.white24),
                              const SizedBox(
                                height: 12,
                              ), // Spacing after divider
                              const Align(
                                alignment: Alignment.centerLeft,
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.accessibility,
                                      color: Color(0xFF4CAF50), // Modern green
                                      size: 20,
                                    ),
                                    SizedBox(width: 8),
                                    Text(
                                      "Standing: 7 hrs",
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(
                        height: 5,
                      ), // Reduced space below Activity Summary Card
                      // Grid for cards (Sleep, Weight, BMI) with enlarged cards
                      GridView.count(
                        physics: const NeverScrollableScrollPhysics(),
                        shrinkWrap: true,
                        crossAxisCount: 2,
                        crossAxisSpacing:
                            2, // Increased spacing between columns
                        mainAxisSpacing: 2, // Increased spacing between rows
                        childAspectRatio: 0.8, // Increase card height
                        children: [
                          const _BodyFatCard(),
                          const _WeightCard(),
                          const _BMICard(),
                          const _VitalityCard(),
                        ],
                      ),
                    ]),
                  ),
                ),
              ],
            ),
            // Placeholder for Workout page
            const Center(
              child: Text(
                "Workout Page",
                style: TextStyle(color: Colors.white, fontSize: 24),
              ),
            ),
            // Placeholder for Community page
            const Center(
              child: Text(
                "Community Page",
                style: TextStyle(color: Colors.white, fontSize: 24),
              ),
            ),
            // MyProfile page
            const MyProfile(),
          ],
        ),
      ),
    );
  }
}

class _BodyFatCard extends StatelessWidget {
  const _BodyFatCard();

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to detail screen for Body Fat
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => DetailScreen(title: "Body Fat %"),
          ),
        );
      },
      child: Container(
        decoration: BoxDecoration(
          color: const Color(0xFF191919),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header with icon and title
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.blue.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(Icons.opacity, color: Colors.blue, size: 24),
                  ),
                  const SizedBox(width: 10),
                  const Text(
                    "Body Fat %",
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              // Value display
              const Text(
                "22.5%", // Latest data
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 28, // Increased font size
                ),
              ),
              const SizedBox(height: 4),
              // Time display
              Text(
                "Updated 9:30 AM", // Last updated time
                style: const TextStyle(color: Colors.white70, fontSize: 12),
              ),
              const Spacer(), // Add flexible space to push graph down
              // Small line graph with modern styling
              Container(
                height: 40, // Height for the graph
                decoration: BoxDecoration(
                  color: const Color(
                    0xFF151515,
                  ), // Darker background for the graph
                  borderRadius: BorderRadius.circular(10),
                ),
                child: CustomPaint(
                  painter: LineChartPainter(),
                  size: Size(double.infinity, 40),
                ),
              ),
              const SizedBox(height: 4),
              // Date labels below the graph (only first and last)
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    "9/10",
                    style: TextStyle(color: Colors.white70, fontSize: 10),
                  ),
                  Text(
                    "9/20",
                    style: TextStyle(color: Colors.white70, fontSize: 10),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom painter for the line chart
class LineChartPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.blue
      ..strokeWidth = 2
      ..strokeCap = StrokeCap.round;

    // Sample data points for body fat percentage over time
    // Values: [9/10: 23.8%, 9/20: 22.5%]
    List<double> values = [23.8, 22.5];
    double minValue = 2.0;
    double maxValue = 24.0;

    double xStep = size.width / (values.length - 1);

    List<Offset> points = [];
    for (int i = 0; i < values.length; i++) {
      double x = i * xStep;
      // Invert y-axis (0,0 is top-left in Flutter)
      double y =
          size.height -
          ((values[i] - minValue) / (maxValue - minValue)) * size.height;
      points.add(Offset(x, y));
    }

    // Draw the line connecting the points
    if (points.length > 1) {
      for (int i = 0; i < points.length - 1; i++) {
        canvas.drawLine(points[i], points[i + 1], paint);
      }
    }

    // Draw gradient below the line
    final gradient = LinearGradient(
      colors: [Colors.blue.shade300, Colors.blue.shade800],
    ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    // Create a path for the gradient area under the line
    final path = Path();
    path.moveTo(0, size.height); // Start at bottom left

    // Add line to each point
    for (int i = 0; i < points.length; i++) {
      path.lineTo(points[i].dx, points[i].dy);
    }

    path.lineTo(size.width, size.height); // End at bottom right
    path.close(); // Close the path

    // Draw the gradient area
    canvas.drawPath(path, Paint()..shader = gradient);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}

class _WeightCard extends StatelessWidget {
  const _WeightCard();

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to detail screen for Weight
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => DetailScreen(title: "Weight"),
          ),
        );
      },
      child: Container(
        decoration: BoxDecoration(
          color: const Color(0xFF191919),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header with icon and title
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(
                      Icons.monitor_weight,
                      color: Colors.green,
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 10),
                  const Text(
                    "Weight",
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              // Value display
              const Text(
                "60.0 kg", // Latest data
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 28, // Increased font size
                ),
              ),
              const SizedBox(height: 4),
              // Time display
              Text(
                "Updated 9:30 AM", // Last updated time
                style: const TextStyle(color: Colors.white70, fontSize: 12),
              ),
              const Spacer(), // Add flexible space to push graph down
              // Small line graph with modern styling
              Container(
                height: 40, // Height for the graph
                decoration: BoxDecoration(
                  color: const Color(
                    0xFF151515,
                  ), // Darker background for the graph
                  borderRadius: BorderRadius.circular(10),
                ),
                child: CustomPaint(
                  painter: WeightLineChartPainter(),
                  size: Size(double.infinity, 40),
                ),
              ),
              const SizedBox(height: 4),
              // Date labels below the graph (only first and last)
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    "9/10",
                    style: TextStyle(color: Colors.white70, fontSize: 10),
                  ),
                  Text(
                    "9/20",
                    style: TextStyle(color: Colors.white70, fontSize: 10),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom painter for the weight line chart
class WeightLineChartPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.green
      ..strokeWidth = 2
      ..strokeCap = StrokeCap.round;

    // Sample data points for weight over time
    // Values: [9/10: 61.2 kg, 9/20: 60.0 kg]
    List<double> values = [61.2, 60.0];
    double minValue = 59.0;
    double maxValue = 62.0;

    double xStep = size.width / (values.length - 1);

    List<Offset> points = [];
    for (int i = 0; i < values.length; i++) {
      double x = i * xStep;
      // Invert y-axis (0,0 is top-left in Flutter)
      double y =
          size.height -
          ((values[i] - minValue) / (maxValue - minValue)) * size.height;
      points.add(Offset(x, y));
    }

    // Draw the line connecting the points
    if (points.length > 1) {
      for (int i = 0; i < points.length - 1; i++) {
        canvas.drawLine(points[i], points[i + 1], paint);
      }
    }

    // Draw gradient below the line
    final gradient = LinearGradient(
      colors: [Colors.green.shade300, Colors.green.shade800],
    ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    // Create a path for the gradient area under the line
    final path = Path();
    path.moveTo(0, size.height); // Start at bottom left

    // Add line to each point
    for (int i = 0; i < points.length; i++) {
      path.lineTo(points[i].dx, points[i].dy);
    }

    path.lineTo(size.width, size.height); // End at bottom right
    path.close(); // Close the path

    // Draw the gradient area
    canvas.drawPath(path, Paint()..shader = gradient);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}

// ---------------- Reusable Widgets ---------------- //

class _MetricItem extends StatelessWidget {
  final IconData icon;
  final Color? iconColor;
  final String label;
  final String value;
  final String goal;
  final VoidCallback? onTap; // Add onTap callback

  const _MetricItem({
    required this.icon,
    this.iconColor,
    required this.label,
    required this.value,
    required this.goal,
    this.onTap, // Make onTap optional
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      // Wrap in GestureDetector to make it clickable
      onTap: onTap, // Use the onTap callback
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment:
            CrossAxisAlignment.start, // Align children to the start (left)
        children: [
          // Horizontal row with icon, label, and arrow
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(icon, color: iconColor ?? Colors.orange, size: 24),
              const SizedBox(width: 8),
              Text(
                label,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(width: 4), // Reduced width instead of Spacer
              const Icon(
                Icons.arrow_forward_ios,
                color: Colors.grey,
                size: 12, // Reduced size from 16 to 12
              ),
            ],
          ),
          const SizedBox(height: 8),
          // Value and goal below the horizontal row, aligned with icon
          Text(
            value,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 24, // Larger font size for value
              fontWeight: FontWeight.bold,
            ),
          ),
          Text(
            goal,
            style: const TextStyle(
              color: Colors.white70,
              fontSize: 12, // Smaller font size for goal
            ),
          ),
        ],
      ),
    );
  }
}

class _ModernMetricItem extends StatelessWidget {
  final IconData icon;
  final Color? iconColor;
  final String label;
  final String value;
  final String goal;
  final VoidCallback? onTap; // Add onTap callback

  const _ModernMetricItem({
    required this.icon,
    this.iconColor,
    required this.label,
    required this.value,
    required this.goal,
    this.onTap, // Make onTap optional
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      // Wrap in GestureDetector to make it clickable
      onTap: onTap, // Use the onTap callback
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),
        decoration: BoxDecoration(
          color: const Color(0xFF1111), // Slightly darker background
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment:
              CrossAxisAlignment.center, // Center align for modern look
          children: [
            // Icon with modern styling
            Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: iconColor!.withOpacity(0.2),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, color: iconColor, size: 20),
            ),
            const SizedBox(height: 6),
            // Label
            Text(
              label,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 8),
            // Value with modern styling
            Text(
              value,
              style: TextStyle(
                color: iconColor, // Use the icon color for the value
                fontSize: 20, // Slightly smaller but cleaner font size
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 4),
            // Goal with subtle styling
            Text(
              goal,
              style: const TextStyle(
                color: Colors.white54,
                fontSize: 11, // Smaller font size for goal
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _InfoCard extends StatelessWidget {
  final String title;
  final String subtitle;
  final String progressText;
  final IconData icon;
  final Color? iconColor;

  const _InfoCard({
    required this.title,
    required this.subtitle,
    required this.progressText,
    required this.icon,
    this.iconColor,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to detail screen based on card type
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => DetailScreen(title: title)),
        );
      },
      child: Card(
        color: const Color(0xFF191919),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Icon(icon, color: iconColor ?? Colors.white, size: 28),
              const SizedBox(height: 10),
              Text(
                title,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
              ),
              const SizedBox(height: 6),
              Text(
                subtitle,
                style: const TextStyle(color: Colors.white70, fontSize: 14),
              ),
              const Spacer(),
              Text(
                progressText,
                style: const TextStyle(color: Colors.greenAccent, fontSize: 12),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _BMICard extends StatelessWidget {
  const _BMICard();

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to detail screen for BMI
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => DetailScreen(title: "BMI")),
        );
      },
      child: Card(
        color: const Color(0xFF191919),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Icon(
                Icons.monitor_heart,
                color: Colors.orange,
                size: 28,
              ), // Changed icon color to orange
              const SizedBox(height: 10),
              Text(
                "BMI",
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                "22.0", // BMI value
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 24, // Larger font size for the value
                ),
              ),
              const SizedBox(height: 2), // Small space above "Normal" text
              Text(
                "Normal", // BMI category
                style: const TextStyle(
                  color: Colors.green, // Green color for normal range
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                ),
              ),
              const Spacer(), // Add flexible space to push graph down
              // BMI Color Graph - Segmented Bar
              Row(
                children: [
                  // Low BMI - Blue with rounded left corner
                  Expanded(
                    flex: 24, // Represents the range 0-24% for low BMI range
                    child: Container(
                      height: 20,
                      decoration: BoxDecoration(
                        color: Colors.blue,
                        borderRadius: const BorderRadius.horizontal(
                          left: Radius.circular(10), // Rounded left corner
                          right: Radius.circular(
                            2,
                          ), // Slightly rounded right corner
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 2), // Small space between segments
                  // Normal BMI - Green
                  Expanded(
                    flex:
                        25, // Represents the range 25-49% for normal BMI range
                    child: Container(
                      height: 20,
                      decoration: BoxDecoration(
                        color: Colors.green,
                        borderRadius: BorderRadius.circular(
                          2,
                        ), // Slightly rounded
                      ),
                    ),
                  ),
                  const SizedBox(width: 2), // Small space between segments
                  // High BMI - Orange
                  Expanded(
                    flex: 25, // Represents the range 50-74% for high BMI range
                    child: Container(
                      height: 20,
                      decoration: BoxDecoration(
                        color: Colors.orange,
                        borderRadius: BorderRadius.circular(
                          2,
                        ), // Slightly rounded
                      ),
                    ),
                  ),
                  const SizedBox(width: 2), // Small space between segments
                  // Very High BMI - Deep Orange with rounded right corner
                  Expanded(
                    flex:
                        26, // Represents the range 75-100% for very high BMI range
                    child: Container(
                      height: 20,
                      decoration: BoxDecoration(
                        color: Colors.deepOrange,
                        borderRadius: const BorderRadius.horizontal(
                          left: Radius.circular(
                            2,
                          ), // Slightly rounded left corner
                          right: Radius.circular(10), // Rounded right corner
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              // Arrow indicator for current BMI position
              LayoutBuilder(
                builder: (context, constraints) {
                  // Calculate position based on BMI value (assuming 22.0 for this example)
                  // BMI range is 0 to 40, so normalize to 0-1 range
                  double bmiValue =
                      22.0; // This would come from actual data in a real app
                  double normalizedPosition =
                      bmiValue / 40.0; // Normalize to 0-1 range
                  if (normalizedPosition > 1.0) normalizedPosition = 1.0;

                  return Stack(
                    children: [
                      Container(height: 20), // Placeholder for arrow
                      Positioned(
                        left: normalizedPosition * constraints.maxWidth,
                        child: Transform.translate(
                          offset: const Offset(
                            -10,
                            0,
                          ), // Center the arrow on the position
                          child: Icon(
                            Icons.arrow_drop_up, // Upward arrow
                            color: Colors.white, // White color for arrow
                            size: 20,
                          ),
                        ),
                      ),
                    ],
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper method to get color based on BMI value
  static Color _getBMIColor(double bmiValue) {
    if (bmiValue < 18.5) {
      return Colors.blue; // Low BMI
    } else if (bmiValue >= 18.5 && bmiValue <= 24.9) {
      return Colors.green; // Normal BMI
    } else if (bmiValue >= 25.0 && bmiValue <= 29.9) {
      return Colors.orange; // High BMI
    } else {
      return Colors.deepOrange; // Very High BMI
    }
  }
}

class _VitalityCard extends StatelessWidget {
  const _VitalityCard();

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // Navigate to detail screen for Vitality Score
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => DetailScreen(title: "Vitality Score"),
          ),
        );
      },
      child: Card(
        color: const Color(0xFF191919),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Icon at the top left
              Align(
                alignment: Alignment.topLeft,
                child: Icon(Icons.person, color: Colors.cyan, size: 28),
              ),
              const SizedBox(height: 6),
              // "Vitality Score" text
              Text(
                "Vitality Score",
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              // "Past 7 days: 6" text
              Text(
                "Past 7 days: 6",
                style: const TextStyle(color: Colors.white70, fontSize: 14),
              ),
              // Date last updated
              Text(
                "26 September",
                style: const TextStyle(color: Colors.white70, fontSize: 12),
              ),
              const Spacer(), // Add flexible space to push graph down
              // Simple graph with straight line at the top and gradient below
              Container(
                height: 40, // Height for the graph
                decoration: BoxDecoration(
                  color: Colors.grey[800], // Dark background for the graph
                ),
                child: CustomPaint(
                  painter: VitalityGraphPainter(),
                  size: Size(double.infinity, 40),
                ),
              ),
              const SizedBox(height: 4),
              // Date labels below the graph (0 at left, 100 at right)
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    "0",
                    style: TextStyle(color: Colors.white70, fontSize: 10),
                  ),
                  Text(
                    "100",
                    style: TextStyle(color: Colors.white70, fontSize: 10),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom painter for the vitality graph
class VitalityGraphPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    // Draw cyan gradient below the line at the top
    final gradient =
        LinearGradient(
          colors: [Colors.cyan.shade300, Colors.cyan.shade800],
        ).createShader(
          Rect.fromLTWH(0, size.height * 0.3, size.width, size.height * 0.7),
        );

    // Draw the gradient area
    canvas.drawRect(
      Rect.fromLTWH(0, size.height * 0.3, size.width, size.height * 0.7),
      Paint()..shader = gradient,
    );

    // Draw the straight line at the top
    final linePaint = Paint()
      ..color = Colors.cyan
      ..strokeWidth = 2
      ..strokeCap = StrokeCap.round;

    canvas.drawLine(
      Offset(0, size.height * 0.3), // Start of line at top
      Offset(size.width, size.height * 0.3), // End of line at top
      linePaint,
    );
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}
